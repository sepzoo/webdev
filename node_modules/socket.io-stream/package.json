{
  "_args": [
    [
      {
        "raw": "socket.io-stream",
        "scope": null,
        "escapedName": "socket.io-stream",
        "name": "socket.io-stream",
        "rawSpec": "",
        "spec": "latest",
        "type": "tag"
      },
      "C:\\Users\\giuse\\Desktop\\proj"
    ]
  ],
  "_from": "socket.io-stream@latest",
  "_id": "socket.io-stream@0.9.1",
  "_inCache": true,
  "_location": "/socket.io-stream",
  "_nodeVersion": "6.3.0",
  "_npmOperationalInternal": {
    "host": "packages-12-west.internal.npmjs.com",
    "tmp": "tmp/socket.io-stream-0.9.1.tgz_1474905141029_0.3379524094052613"
  },
  "_npmUser": {
    "name": "nkzawa",
    "email": "naoyuki.kanezawa@gmail.com"
  },
  "_npmVersion": "3.10.3",
  "_phantomChildren": {},
  "_requested": {
    "raw": "socket.io-stream",
    "scope": null,
    "escapedName": "socket.io-stream",
    "name": "socket.io-stream",
    "rawSpec": "",
    "spec": "latest",
    "type": "tag"
  },
  "_requiredBy": [
    "#USER",
    "/"
  ],
  "_resolved": "https://registry.npmjs.org/socket.io-stream/-/socket.io-stream-0.9.1.tgz",
  "_shasum": "421258316288b83ac693b0d43efd09d6d43aba97",
  "_shrinkwrap": null,
  "_spec": "socket.io-stream",
  "_where": "C:\\Users\\giuse\\Desktop\\proj",
  "author": {
    "name": "Naoyuki Kanezawa",
    "email": "naoyuki.kanezawa@gmail.com"
  },
  "bugs": {
    "url": "https://github.com/nkzawa/socket.io-stream/issues"
  },
  "contributors": [
    {
      "name": "Naoyuki Kanezawa",
      "email": "naoyuki.kanezawa@gmail.com"
    },
    {
      "name": "Aaron O'Mullan",
      "email": "aaron.omullan@friendco.de"
    }
  ],
  "dependencies": {
    "component-bind": "~1.0.0",
    "debug": "~2.2.0"
  },
  "description": "stream for socket.io",
  "devDependencies": {
    "blob": "0.0.4",
    "browserify": "~13.1.0",
    "expect.js": "~0.3.1",
    "mocha": "~3.0.2",
    "socket.io": "~1.4.8",
    "socket.io-client": "~1.4.8",
    "zuul": "~3.11.1",
    "zuul-ngrok": "~4.0.0"
  },
  "directories": {},
  "dist": {
    "shasum": "421258316288b83ac693b0d43efd09d6d43aba97",
    "tarball": "https://registry.npmjs.org/socket.io-stream/-/socket.io-stream-0.9.1.tgz"
  },
  "gitHead": "8feef9e9ce296ec87e471731735abc6982e4158d",
  "homepage": "https://github.com/nkzawa/socket.io-stream#readme",
  "keywords": [
    "stream",
    "socket.io",
    "binary",
    "file",
    "upload",
    "download"
  ],
  "maintainers": [
    {
      "name": "nkzawa",
      "email": "naoyuki.kanezawa@gmail.com"
    }
  ],
  "name": "socket.io-stream",
  "optionalDependencies": {},
  "readme": "# Socket.IO stream\n\n[![Build Status](https://travis-ci.org/nkzawa/socket.io-stream.png?branch=master)](https://travis-ci.org/nkzawa/socket.io-stream)\n[![NPM version](https://badge.fury.io/js/socket.io-stream.png)](http://badge.fury.io/js/socket.io-stream)\n\nThis is the module for bidirectional binary data transfer with Stream API through [Socket.IO](https://github.com/socketio/socket.io).\n\n## Installation\n\n    npm install socket.io-stream\n\n## Usage\n\nIf you are not familiar with Stream API, be sure to check out [the docs](http://nodejs.org/api/stream.html).\nI also recommend checking out the awesome [Stream Handbook](https://github.com/substack/stream-handbook).\n\nFor streaming between server and client, you will send stream instances first.\nTo receive streams, you just wrap `socket` with `socket.io-stream`, then listen any events as usual.\n\nServer:\n\n```js\nvar io = require('socket.io').listen(80);\nvar ss = require('socket.io-stream');\nvar path = require('path');\n\nio.of('/user').on('connection', function(socket) {\n  ss(socket).on('profile-image', function(stream, data) {\n    var filename = path.basename(data.name);\n    stream.pipe(fs.createWriteStream(filename));\n  });\n});\n```\n\n`createStream()` returns a new stream which can be sent by `emit()`.\n\nClient:\n\n```js\nvar io = require('socket.io-client');\nvar ss = require('socket.io-stream');\n\nvar socket = io.connect('http://example.com/user');\nvar stream = ss.createStream();\nvar filename = 'profile.jpg';\n\nss(socket).emit('profile-image', stream, {name: filename});\nfs.createReadStream(filename).pipe(stream);\n```\n\nYou can stream data from a client to server, and vice versa.\n\n```js\n// send data\nss(socket).on('file', function(stream) {\n  fs.createReadStream('/path/to/file').pipe(stream);\n});\n\n// receive data\nss(socket).emit('file', stream);\nstream.pipe(fs.createWriteStream('file.txt'));\n```\n\n### Browser\n\nThis module can be used on the browser. To do so, just copy a file to a public directory.\n\n    $ cp node_modules/socket.io-stream/socket.io-stream.js somewhere/public/\n\nYou can also use [browserify](http://github.com/substack/node-browserify) to create your own bundle.\n\n    $ npm install browserify -g\n    $ cd node_modules/socket.io-stream\n    $ browserify index.js -s ss > socket.io-stream.js\n\n```html\n<input id=\"file\" type=\"file\" />\n\n<script src=\"/socket.io/socket.io.js\"></script>\n<script src=\"/js/socket.io-stream.js\"></script>\n<script src=\"/js/jquery.js\"></script>\n<script>\n$(function() {\n  var socket = io.connect('/foo');\n\n  $('#file').change(function(e) {\n    var file = e.target.files[0];\n    var stream = ss.createStream();\n\n    // upload a file to the server.\n    ss(socket).emit('file', stream, {size: file.size});\n    ss.createBlobReadStream(file).pipe(stream);\n  });\n});\n</script>\n```\n\n#### Upload progress\n\nYou can track upload progress like the following:\n\n```js\nvar blobStream = ss.createBlobReadStream(file);\nvar size = 0;\n\nblobStream.on('data', function(chunk) {\n  size += chunk.length;\n  console.log(Math.floor(size / file.size * 100) + '%');\n  // -> e.g. '42%'\n});\n\nblobStream.pipe(stream);\n```\n\n### Socket.IO v0.9 support\n\nYou have to set `forceBase64` option `true` when using the library with socket.io v0.9.x.\n\n```js\nss.forceBase64 = true;\n```\n\n\n## Documentation\n\n### ss(sio)\n\n- sio `socket.io Socket` A socket of Socket.IO, both for client and server\n- return `Socket`\n\nLook up an existing `Socket` instance based on `sio` (a socket of Socket.IO), or create one if it doesn't exist.\n\n### socket.emit(event, [arg1], [arg2], [...])\n\n- event `String` The event name\n\nEmit an `event` with variable number of arguments including at least a stream.\n\n```js\nss(socket).emit('myevent', stream, {name: 'thefilename'}, function() { ... });\n\n// send some streams at a time.\nss(socket).emit('multiple-streams', stream1, stream2);\n\n// as members of array or object.\nss(socket).emit('flexible', [stream1, { foo: stream2 }]);\n\n// get streams through the ack callback\nss(socket).emit('ack', function(stream1, stream2) { ... });\n```\n\n### socket.on(event, listener)\n\n- event `String` The event name\n- listener `Function` The event handler function\n\nAdd a `listener` for `event`. `listener` will take stream(s) with any data as arguments.\n\n```js\nss(socket).on('myevent', function(stream, data, callback) { ... });\n\n// access stream options\nss(socket).on('foo', function(stream) {\n  if (stream.options && stream.options.highWaterMark > 1024) {\n    console.error('Too big highWaterMark.');\n    return;\n  }\n});\n```\n\n### ss.createStream([options])\n\n- options `Object`\n    - highWaterMark `Number`\n    - encoding `String`\n    - decodeStrings `Boolean`\n    - objectMode `Boolean`\n    - allowHalfOpen `Boolean` if `true`, then the stream won't automatically close when the other endpoint ends. Default to `false`.\n- return `Duplex Stream`\n\nCreate a new duplex stream. See [the docs](http://nodejs.org/api/stream.html) for the details of stream and `options`.\n\n```js\nvar stream = ss.createStream();\n\n// with options\nvar stream = ss.createStream({\n  highWaterMark: 1024,\n  objectMode: true,\n  allowHalfOpen: true\n});\n```\n\n### ss.createBlobReadStream(blob, [options])\n\n- options `Object`\n    - highWaterMark `Number`\n    - encoding `String`\n    - objectMode `Boolean`\n- return `Readable Stream`\n\nCreate a new readable stream for [Blob](https://developer.mozilla.org/en-US/docs/Web/API/Blob) and [File](https://developer.mozilla.org/en-US/docs/Web/API/File) on browser. See [the docs](http://nodejs.org/api/stream.html) for the details of stream and `options`.\n\n```js\nvar stream = ss.createBlobReadStream(new Blob([1, 2, 3]));\n```\n\n### ss.Buffer\n\n[Node Buffer](https://nodejs.org/api/buffer.html) class to use on browser, which is exposed for convenience. On Node environment, you should just use normal `Buffer`.\n\n```js\nvar stream = ss.createStream();\nstream.write(new ss.Buffer([0, 1, 2]));\n```\n\n## License\n\nMIT\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git://github.com/nkzawa/socket.io-stream.git"
  },
  "scripts": {
    "prepublish": "make build",
    "test": "make test"
  },
  "version": "0.9.1"
}
